#BlueJ class context
comment0.target=DiGraph
comment0.text=\n\ \ DiGraph.java\n\ \ \n\ \ Defines\ the\ Interface\ for\ a\ directed\ graph.\n\n\ @author\ (SK)\n\ @version\ (17/3/2021)\n
comment1.params=
comment1.target=boolean\ isEmpty()
comment1.text=\n\ Returns\ true\ if\ the\ graph\ is\ empty\ and\ false\ otherwise.\ \n\ @return\ boolean\ True\ iff\ the\ graph\ is\ empty\n
comment10.params=tgf_file_name
comment10.target=void\ saveToTGF(java.lang.String)
comment10.text=\n\ Saves\ the\ current\ graph\ into\ a\ .tgf\ file.\n\ @param\ the\ name\ of\ the\ file\ to\ write\ to\ \n
comment2.params=
comment2.target=int\ getNumVertices()
comment2.text=\n\ Returns\ the\ number\ of\ vertices\ in\ the\ graph\n\ @return\ int\ The\ number\ of\ vertices\ in\ the\ graph\n
comment3.params=
comment3.target=int\ getNumArcs()
comment3.text=\n\ Returns\ the\ number\ of\ arcs\ in\ the\ graph\n\ @return\ int\ The\ number\ of\ arcs\ in\ the\ graph\n
comment4.params=vertex1\ vertex2
comment4.target=boolean\ isArc(java.lang.Object,\ java.lang.Object)
comment4.text=\n\ Returns\ true\ iff\ a\ directed\ connection\ exists\ between\ the\ two\ input\ vertices\n\ @param\ T\ the\ first\ vertex\n\ @param\ T\ the\ second\ vertex\n\ @return\ boolean\ true\ iff\ a\ directed\ connection\ \n\ exists\ from\ the\ first\ vertex\ to\ the\ second\n
comment5.params=vertex
comment5.target=void\ addVertex(java.lang.Object)
comment5.text=\n\ Adds\ the\ input\ vertex\ to\ the\ graph.\ \ \n\ If\ the\ vertex\ already\ exists\ in\ the\ graph,\ the\ graph\ is\ not\ changed.\n\ @param\ T\ the\ vertex\ to\ be\ added\ to\ the\ graph\n
comment6.params=vertex
comment6.target=void\ removeVertex(java.lang.Object)
comment6.text=\n\ Removes\ the\ input\ vertex\ from\ the\ graph.\ \n\ If\ the\ input\ vertex\ does\ not\ belong\ in\ the\ graph,\ the\ graph\ is\ not\ changed.\n\n\ @param\ T\ The\ vertex\ to\ be\ removed.\n
comment7.params=source\ destination
comment7.target=void\ addArc(java.lang.Object,\ java.lang.Object)
comment7.text=\n\ Adds\ an\ arc\ to\ the\ graph,\ from\ source\ to\ destination.\ \n\ If\ source\ or\ destination\ do\ not\ exist\ in\ the\ graph,\n\ the\ graph\ is\ not\ changed.\ \n\ \n\ @param\ T\ the\ source\ of\ the\ arc\ \n\ @param\ T\ the\ destination\ of\ the\ arc\ \n
comment8.params=vertex1\ vertex2
comment8.target=void\ removeArc(java.lang.Object,\ java.lang.Object)
comment8.text=\n\ Removes\ the\ arc\ between\ v1\ and\ v2.\n\ If\ v1\ or\ v2,\ or\ the\ arc\ from\ v1\ to\ v2\ does\ not\ exist,\n\ the\ graph\ does\ not\ change.\ \n\ \n\ @param\ T\ the\ source\ of\ the\ arc\ to\ be\ removed\n\ @param\ T\ the\ destination\ of\ the\ arc\ to\ be\ removed\n
comment9.params=
comment9.target=java.lang.String\ toString()
comment9.text=\n\ \ Returns\ a\ string\ representation\ of\ the\ graph.\ \n\ \ \n\ \ @return\ String\ a\ string\ representation\ of\ this\ graph\n
numComments=11

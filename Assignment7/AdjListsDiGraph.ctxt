#BlueJ class context
comment0.target=AdjListsDiGraph
comment0.text=\n\ AdjListsDiGraph.java\n\ Implements\ the\ DiGraph\ Interface.\n\ Uses\ a\ Vector\ of\ LinkedLists\ to\ keep\ track\ of\ the\ adjacent\ vertices.\n\ \n\ @author\ vs2,\ yl102\n\ @version\ (11/20/2021)\n
comment1.params=
comment1.target=AdjListsDiGraph()
comment1.text=\n\ Constructor\n\ Creates\ an\ empty\ graph\n
comment10.params=vertex1\ vertex2
comment10.target=boolean\ isArc(java.lang.Object,\ java.lang.Object)
comment10.text=\n\ Returns\ true\ iff\ a\ directed\ connection\ exists\ between\ the\ two\ input\ vertices\n\ @param\ vertex1\ The\ first\ vertex\n\ @param\ vertex2\ The\ second\ vertex\n\ @return\ boolean\ true\ iff\ a\ directed\ connection\n\ exists\ from\ the\ first\ vertex\ to\ the\ second\n
comment11.params=vertex1\ vertex2
comment11.target=boolean\ isEdge(java.lang.Object,\ java.lang.Object)
comment11.text=\ \n\ Returns\ true\ iff\ an\ edge\ exists\ between\ two\ given\ vertices\n\ which\ means\ that\ two\ corresponding\ arcs\ exist\ in\ the\ graph\ \n\ @param\ vertex1\ The\ first\ vertex\n\ @param\ vertex2\ The\ second\ vertex\n\ @return\ boolean\ true\ iff\ there\ exists\ an\ edge\n
comment12.params=vertex1\ vertex2
comment12.target=void\ removeArc(java.lang.Object,\ java.lang.Object)
comment12.text=\n\ Removes\ the\ arc\ between\ vertex1\ and\ vertex2.\n\ If\ vertex1\ or\ vertex2,\ or\ the\ arc\ from\ vertex1\ to\ vertex2\ does\ not\ exist,\n\ the\ graph\ does\ not\ change.\n\n\ @param\ vertex1\ The\ source\ of\ the\ arc\ to\ be\ removed\n\ @param\ vertex2\ The\ destination\ of\ the\ arc\ to\ be\ removed\n
comment13.params=vertex1\ vertex2
comment13.target=void\ removeEdge(java.lang.Object,\ java.lang.Object)
comment13.text=\ Removes\ an\ edge\ between\ two\ vertices\ of\ this\ graph,\n\ if\ the\ vertices\ exist,\ else\ does\ not\ change\ the\ graph.\ \n\ @param\ vertex1\ The\ first\ vertex\n\ @param\ vertex2\ The\ second\ vertex\n
comment14.params=vertex
comment14.target=void\ removeVertex(java.lang.Object)
comment14.text=\ Removes\ a\ single\ vertex\ with\ the\ given\ value\ from\ this\ graph.\n\ If\ the\ vertex\ does\ not\ exist,\ it\ does\ not\ change\ the\ graph.\ \n\ @param\ vertex\ The\ vertex\ to\ be\ removed\ \n
comment15.params=args
comment15.target=void\ main(java.lang.String[])
comment15.text=\n\ main()\n\ for\ testing\ \n
comment2.params=fName
comment2.target=void\ saveToTGF(java.lang.String)
comment2.text=\n\ Saves\ the\ current\ graph\ into\ a\ .tgf\ file.\n\ @param\ fName\ The\ name\ of\ the\ file\ to\ write\ to\n
comment3.params=
comment3.target=boolean\ isEmpty()
comment3.text=\n\ Returns\ true\ if\ the\ graph\ is\ empty\ and\ false\ otherwise.\n\ @return\ boolean\ True\ iff\ the\ graph\ is\ empty\n\ \n
comment4.params=
comment4.target=int\ getNumVertices()
comment4.text=\n\ Returns\ the\ number\ of\ vertices\ in\ the\ graph\n\ @return\ int\ The\ number\ of\ vertices\ in\ the\ graph\n\ \n
comment5.params=
comment5.target=int\ getNumArcs()
comment5.text=\n\ Returns\ the\ number\ of\ arcs\ in\ the\ graph\n\ @return\ int\ The\ number\ of\ arcs\ in\ the\ graph\n\ \n
comment6.params=vertex
comment6.target=void\ addVertex(java.lang.Object)
comment6.text=\n\ Adds\ the\ input\ vertex\ to\ the\ graph.\n\ If\ the\ vertex\ already\ exists\ in\ the\ graph,\ the\ graph\ is\ not\ changed.\n\ @param\ vertex\ The\ vertex\ to\ be\ added\ to\ the\ graph\n\ \n
comment7.params=vertex1\ vertex2
comment7.target=void\ addArc(java.lang.Object,\ java.lang.Object)
comment7.text=\n\ Adds\ an\ arc\ to\ the\ graph,\ from\ source\ to\ destination.\n\ If\ source\ or\ destination\ do\ not\ exist\ in\ the\ graph,\n\ the\ graph\ is\ not\ changed.\n\ Verifies\ that\ source\ and\ destination\ are\ valid\ vertices\ in\ the\ graph,\n\ and\ that\ the\ newly\ added\ arc\ does\ not\ already\ belong\ in\ the\ graph.\n\n\ @param\ source\ The\ source\ of\ the\ arc\n\ @param\ destination\ The\ destination\ of\ the\ arc\n\ \n
comment8.params=vertex1\ vertex2
comment8.target=void\ addEdge(java.lang.Object,\ java.lang.Object)
comment8.text=\ Inserts\ an\ edge\ between\ two\ vertices\ of\ this\ graph,\n\ if\ the\ vertices\ exist.\ Else\ does\ not\ change\ the\ graph.\ \n\ @param\ vertex1\ The\ first\ vertex\n\ @param\ vertex2\ The\ second\ vertex\ \n
comment9.params=
comment9.target=java.lang.String\ toString()
comment9.text=\n\ \ Returns\ a\ string\ representation\ of\ the\ graph.\n\n\ \ @return\ String\ a\ string\ representation\ of\ this\ graph\n
numComments=16

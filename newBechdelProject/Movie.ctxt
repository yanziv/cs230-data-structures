#BlueJ class context
comment0.target=Movie
comment0.text=\n\ Represents\ an\ object\ of\ type\ Movie.\n\ A\ Movie\ object\ has\ a\ title,\ some\ Actors,\ and\ results\ for\ the\ twelve\ Bechdel\ tests.\n\n\ @author\ yl102,\ vs2,\ cl103\n\ @version\ 12/5/2021\n
comment1.params=title
comment1.target=Movie(java.lang.String)
comment1.text=\n\ Constructor\n\ Constructs\ a\ Movie\ object\ with\ a\ given\ title\ \n
comment10.params=
comment10.target=java.lang.String\ toString()
comment10.text=\n\ Returns\ a\ string\ representation\ of\ this\ movie.\n\ \ \ \ \ \n\ @return\ a\ string\ representation\ of\ movie\n
comment11.params=
comment11.target=boolean\ isFeminist()
comment11.text=\n\ Decides\ if\ this\ movie\ is\ feminist.\ \n\ It\ is\ considered\ feminist\ if\ it\ passes\ the\ Pierce\ Test,\ Feldman\ Score\ Test,\ \n\ Rees\ Davies\ Test,\ and\ Waithe\ Test.\n\ \n\ @return\ True\ if\ the\ movie\ is\ feminist.\ False\ if\ not.\ \n
comment12.params=args
comment12.target=void\ main(java.lang.String[])
comment12.text=\n\ Main\ method\ for\ testing\n
comment2.params=
comment2.target=java.lang.String\ getTitle()
comment2.text=\n\ Returns\ the\ movie's\ title\n\ \n\ @return\ title\ of\ the\ movie\n
comment3.params=results
comment3.target=void\ setTestResults(java.lang.String)
comment3.text=\n\ populates\ the\ testResults\ vector\ with\ "0"\ and\ "1"s,\ \n\ each\ representing\ the\ result\ of\ the\ coresponding\ test\ on\ this\ movie.\n\ \n\ @param\ results\ string\ consisting\ of\ of\ 0's\ and\ 1's.\ Each\ one\ of\ these\ values\ denotes\ the\ result\ of\ the\ corresponding\ test\ on\ this\ movie\n
comment4.params=
comment4.target=java.util.Vector\ getAllTestResults()
comment4.text=\n\ returns\ a\ Vector\ with\ all\ the\ Bechdel\ test\ results\ for\ this\ movie\n\ \n\ @return\ A\ Vector\ with\ the\ Bechdel\ test\ results\ for\ this\ movie\:\ \n\ A\ test\ result\ can\ be\ "1"\ or\ "0"\ indicating\ that\ this\ move\ passed\ or\ did\ not\ pass\ the\ corresponding\ test.\n
comment5.params=actorsFile
comment5.target=void\ addAllActors(java.lang.String)
comment5.text=\n\ Reads\ the\ input\ file\ ("nextBechdel_castGender.txt"),\ and\ adds\ all\ its\ Actors\ to\ this\ movie.\ \n\ Each\ line\ in\ the\ movie\ has\ the\ following\ formatting\:\ \n\ Input\ String\ has\ the\ following\ formatting\:\ "MOVIE\ TITLE","ACTOR","CHARACTER_NAME","TYPE","BILLING","GENDER"\ Example\ of\ input\:\ "Trolls","Ricky\ Dillon","Aspen\ Heitz","Supporting","18","Male"\n\ \n\ @param\ actorsFile\ The\ data\ file\ to\ be\ read\n
comment6.params=line
comment6.target=Actor\ addOneActor(java.lang.String)
comment6.text=\n\ Takes\ in\ a\ String,\ formatted\ as\ lines\ are\ in\ the\ input\ file\ ("nextBechdel_castGender.txt"),\ \n\ generates\ an\ Actor,\ and\ adds\ the\ object\ to\ the\ actors\ of\ this\ movie.\\\n\ \n\ @param\ line\ A\ string\ representation\ of\ the\ actor.\n\ @return\ The\ Actor\ Object\ being\ added\n
comment7.params=
comment7.target=java.util.Hashtable\ getAllActors()
comment7.text=\n\ Returns\ the\ movie's\ actors\ in\ a\ Hashtable\n\ \n\ @return\ Hashtable\ of\ movie's\ actors\n
comment8.params=
comment8.target=java.util.LinkedList\ getActors()
comment8.text=\n\ \ \ \ \ returns\ a\ Linked\ List\ with\ all\ the\ actor\ names\ who\ played\ in\ this\ movie.\n\ \ \ \ \ \n\ \ \ \ \ @return\ Linked\ List\ containin\ actor\ names\n
comment9.params=other
comment9.target=boolean\ equals(java.lang.Object)
comment9.text=\n\ Tests\ this\ movie\ object\ with\ the\ input\ one\ and\ determines\ whether\ they\ are\ equal.\n\ \n\ @param\ other\ The\ Movie\ Object\ to\ be\ compared\n\ @return\ true\ if\ both\ objects\ are\ movies\ and\ have\ the\ same\ title,\ \n\ false\ in\ any\ other\ case.\n
numComments=13
